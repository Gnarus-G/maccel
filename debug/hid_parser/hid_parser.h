#ifndef _HID_PARSER_H
#define _HID_PARSER_H

//Some report descriptors
#define STEELSERIES_RIVAL_600 \
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0xA1, 0x02, 0x05, 0x09, 0x19, 0x01, \
    0x29, 0x08, 0x15, 0x00, 0x25, 0x01, 0x95, 0x08, 0x75, 0x01, 0x81, 0x02, 0x05, 0x01, 0x09, 0x30, \
    0x09, 0x31, 0x16, 0x01, 0x80, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x02, 0x81, 0x06, 0x09, 0x38, \
    0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x81, 0x06, 0xC0, 0xA1, 0x02, 0x05, 0x0C, 0x0A, \
    0x38, 0x02, 0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x81, 0x06, 0xC0, 0xA1, 0x02, 0x06, \
    0xC1, 0xFF, 0x15, 0x00, 0x26, 0xFF, 0x00, 0x75, 0x08, 0x09, 0xF0, 0x95, 0x02, 0x81, 0x02, 0xC0, \
    0xC0, 0xC0

#define CSL_OPTICAL_MOUSE \
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x85, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, \
    0x29, 0x05, 0x15, 0x00, 0x25, 0x01, 0x95, 0x05, 0x75, 0x01, 0x81, 0x02, 0x95, 0x01, 0x75, 0x03, \
    0x81, 0x03, 0x05, 0x01, 0x16, 0x01, 0xF8, 0x26, 0xFF, 0x07, 0x75, 0x0C, 0x95, 0x02, 0x09, 0x30, \
    0x09, 0x31, 0x81, 0x06, 0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x09, 0x38, 0x81, 0x06, \
    0xC0, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x95, 0x01, 0x81, 0x06, 0xC0

#define LOGITECH_G5 \
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, 0x29, 0x08, \
    0x15, 0x00, 0x25, 0x01, 0x95, 0x08, 0x75, 0x01, 0x81, 0x02, 0x06, 0x00, 0xFF, 0x09, 0x40, 0x15, \
    0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x02, 0x81, 0x02, 0x05, 0x01, 0x09, 0x38, 0x95, 0x01, 0x81, \
    0x06, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x95, 0x01, 0x81, 0x06, 0x05, 0x01, 0x16, 0x01, 0x80, 0x26, \
    0xFF, 0x7F, 0x75, 0x10, 0x95, 0x02, 0x09, 0x30, 0x09, 0x31, 0x81, 0x06, 0x05, 0x09, 0x19, 0x09, \
    0x29, 0x10, 0x15, 0x00, 0x25, 0x01, 0x95, 0x08, 0x75, 0x01, 0x81, 0x02, 0xC0, 0xC0

#define COOLERMASTER_MM710 \
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, 0x29, 0x10, \
    0x15, 0x00, 0x25, 0x01, 0x75, 0x01, 0x95, 0x10, 0x81, 0x02, 0x05, 0x01, 0x09, 0x30, 0x09, 0x31, \
    0x16, 0x01, 0x80, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x02, 0x81, 0x06, 0x09, 0x38, 0x15, 0x81, \
    0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x81, 0x06, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x95, 0x01, 0x81, \
    0x06, 0xC0, 0xC0

#define SWIFTPOINT_TRACER \
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x85, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x95, 0x10, 0x75, 0x01, \
    0x05, 0x09, 0x19, 0x01, 0x29, 0x10, 0x15, 0x00, 0x25, 0x01, 0x81, 0x02, 0x75, 0x10, 0x95, 0x02, \
    0x05, 0x01, 0x09, 0x30, 0x09, 0x31, 0x16, 0x01, 0x80, 0x26, 0xFF, 0x7F, 0x81, 0x06, 0xA1, 0x02, \
    0x85, 0x02, 0x09, 0x48, 0x95, 0x01, 0x75, 0x02, 0x15, 0x00, 0x25, 0x01, 0x35, 0x01, 0x45, 0x78, \
    0xB1, 0x02, 0x85, 0x01, 0x75, 0x10, 0x95, 0x01, 0x09, 0x38, 0x35, 0x00, 0x45, 0x00, 0x16, 0x01, \
    0x80, 0x26, 0xFF, 0x7F, 0x81, 0x06, 0xC0, 0xA1, 0x02, 0x85, 0x02, 0x09, 0x48, 0x95, 0x01, 0x75, \
    0x02, 0x15, 0x00, 0x25, 0x01, 0x35, 0x01, 0x45, 0x78, 0xB1, 0x02, 0x35, 0x00, 0x45, 0x00, 0x75, \
    0x04, 0xB1, 0x03, 0x85, 0x01, 0x75, 0x10, 0x95, 0x01, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x16, 0x01, \
    0x80, 0x26, 0xFF, 0x7F, 0x81, 0x06, 0xC0, 0xC0, 0xC0

#define TRUST_GXT \
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, 0x29, 0x05, \
    0x15, 0x00, 0x25, 0x01, 0x95, 0x05, 0x75, 0x01, 0x81, 0x02, 0x95, 0x01, 0x75, 0x03, 0x81, 0x01, \
    0x05, 0x01, 0x09, 0x30, 0x09, 0x31, 0x09, 0x38, 0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x03, \
    0x81, 0x06, 0xC0, 0xC0


// HID Descriptors
enum D_hid_descriptor{
    // No data follows after descriptor
    D_END_COLLECTION = 0xC0,

    D_REPORT_ID = 0x84,
    D_INPUT = 0x80,
    D_FEATURE = 0xB0,
    D_REPORT_SIZE = 0x74,
    D_REPORT_COUNT = 0x94,
    D_LOGICAL_MINIMUM = 0x14,
    D_LOGICAL_MAXIMUM = 0x24,
    D_USAGE = 0x08,
    D_USAGE_PAGE = 0x04,
};

// HID data stored after a descriptor
enum hid_data{
    D_USAGE_BUTTON = 0x09,
    D_USAGE_WHEEL = 0x38,
    D_USAGE_X = 0x30,
    D_USAGE_Y = 0x31
};

//Stores the bit offset and bit size in the raw reported data structure of usb_mouse::data
struct report_entry {
    unsigned char id;       // Report ID
	unsigned char offset;	// In bits
	unsigned char size;		// In bits
    unsigned char sgn;      // Is this value signed (1) or unsigned (0)?
};

//Stores a collection of important offsets & sizes for report data in usb_mouse::data
struct report_positions {
    int report_id_tagged;   //When the report descriptor parser recognizes a report ID is used, this field is set to 1
	struct report_entry button;
	struct report_entry x;
	struct report_entry y;
	struct report_entry wheel;
};

#endif //_HID_PARSER_H
